(()=>{"use strict";class e{static async get(e){try{return(await chrome.storage.sync.get(e))[e]||null}catch(e){return console.error("Storage get error:",e),null}}static async set(e,t){try{await chrome.storage.sync.set({[e]:t})}catch(e){console.error("Storage set error:",e)}}static async remove(e){try{await chrome.storage.sync.remove(e)}catch(e){console.error("Storage remove error:",e)}}static async clear(){try{await chrome.storage.sync.clear()}catch(e){console.error("Storage clear error:",e)}}static async getAll(){try{return await chrome.storage.sync.get()}catch(e){return console.error("Storage get all error:",e),{}}}}class t{constructor(){this.events=[]}static getInstance(){return t.instance||(t.instance=new t),t.instance}track(e,t){const a={event:e,properties:t,timestamp:Date.now()};this.events.push(a),console.log("Analytics event:",a),this.sendToBackend(a)}async sendToBackend(e){try{const t=await this.getConfig();t?.apiEndpoint&&await fetch(`${t.apiEndpoint}/api/analytics`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}catch(e){console.error("Failed to send analytics to backend:",e)}}async getConfig(){try{return(await chrome.storage.sync.get(["settings"])).settings}catch(e){return console.error("Failed to get config:",e),null}}getEvents(){return[...this.events]}clearEvents(){this.events=[]}}class a{constructor(){this.config={apiEndpoint:"http://localhost:3001",autoScan:!0,notifications:!0,strictMode:!1,debugMode:!1,enabled:!0,dataRetentionDays:30}}static getInstance(){return a.instance||(a.instance=new a),a.instance}async loadConfig(){try{const e=await chrome.storage.sync.get(["settings"]);e.settings&&(this.config={...this.config,...e.settings})}catch(e){console.error("Failed to load config:",e)}return this.config}async saveConfig(e){try{this.config={...this.config,...e},await chrome.storage.sync.set({settings:this.config})}catch(e){console.error("Failed to save config:",e)}}getConfig(){return{...this.config}}getApiEndpoint(){return this.config.apiEndpoint}isAutoScanEnabled(){return this.config.autoScan}areNotificationsEnabled(){return this.config.notifications}isStrictModeEnabled(){return this.config.strictMode}isDebugModeEnabled(){return this.config.debugMode}}const n=new class{constructor(){this.isEnabled=!0,this.logLevel="info"}debug(e,t){this.log("debug",e,t)}info(e,t){this.log("info",e,t)}warn(e,t){this.log("warn",e,t)}error(e,t){this.log("error",e,t)}log(e,t,a){if(!this.isEnabled||!this.shouldLog(e))return;const n={level:e,message:t,data:this.sanitizeData(a),timestamp:(new Date).toISOString(),source:this.getSource()};this.logToConsole(n),"error"!==e&&"warn"!==e||this.sendToBackground(n)}shouldLog(e){const t=["debug","info","warn","error"];return t.indexOf(e)>=t.indexOf(this.logLevel)}sanitizeData(e){if(!e)return e;const t=["password","token","apiKey","secret","email","phone"];if("object"==typeof e){const a={...e};for(const e of Object.keys(a))t.some(t=>e.toLowerCase().includes(t))&&(a[e]="[REDACTED]");return a}return e}getSource(){return"undefined"!=typeof chrome&&chrome.runtime?"extension":"unknown"}logToConsole(e){const t=`[SmartShield ${e.level.toUpperCase()}] ${e.message}`;switch(e.level){case"debug":console.debug(t,e.data);break;case"info":console.info(t,e.data);break;case"warn":console.warn(t,e.data);break;case"error":console.error(t,e.data)}}sendToBackground(e){try{"undefined"!=typeof chrome&&chrome.runtime&&chrome.runtime.sendMessage({type:"LOG_ENTRY",payload:e}).catch(()=>{})}catch(e){}}setLevel(e){this.logLevel=e}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1}};async function r(e,t){try{if(!t.url||!t.id)return;if(!a.getInstance().getConfig().enabled)return;chrome.tabs.sendMessage(e,{type:"START_ANALYSIS",payload:{url:t.url,timestamp:Date.now()}}).catch(t=>{n.debug("Content script not ready",{tabId:e,error:t})})}catch(t){n.error("Failed to initialize tab analysis",{tabId:e,error:t})}}async function s(t){try{const a=await e.get(`tab_${t}_status`);if(a){const e=a;e.score>=.8?(chrome.action.setBadgeText({text:"!",tabId:t}),chrome.action.setBadgeBackgroundColor({color:"#dc3545",tabId:t})):e.score>=.5?(chrome.action.setBadgeText({text:"?",tabId:t}),chrome.action.setBadgeBackgroundColor({color:"#ffc107",tabId:t})):chrome.action.setBadgeText({text:"",tabId:t})}else chrome.action.setBadgeText({text:"â€¢",tabId:t}),chrome.action.setBadgeBackgroundColor({color:"#6c757d",tabId:t})}catch(e){n.error("Failed to update badge",{tabId:t,error:e})}}async function o(e,a){try{if(!a?.id)return;const{score:n,reasons:r,snapshotHash:s}=e,o=chrome.runtime.getURL(`warning.html?tabId=${a.id}&score=${n}&hash=${s}`);await chrome.windows.create({url:o,type:"popup",width:400,height:500,focused:!0}),t.getInstance().track("warning_shown",{score:n,url:a.url,domain:a.url?new URL(a.url).hostname:"unknown"})}catch(e){n.error("Failed to show warning",{error:e})}}async function i(t){if(!t)return null;try{return await e.get(`tab_${t}_status`)}catch(e){return n.error("Failed to get tab status",{tabId:t,error:e}),null}}async function c(){try{n.info("Phishing rules update requested")}catch(e){n.error("Failed to update phishing rules",{error:e})}}chrome.runtime.onInstalled.addListener(async e=>{n.info("SmartShield extension installed/updated",{details:e}),"install"===e.reason?(await async function(){try{const e=a.getInstance();await e.loadConfig(),chrome.alarms.create("analytics_sync",{periodInMinutes:5}),chrome.alarms.create("cleanup_old_data",{periodInMinutes:1440}),chrome.alarms.create("update_phishing_rules",{periodInMinutes:10080}),n.info("Extension initialized successfully")}catch(e){n.error("Failed to initialize extension",{error:e})}}(),t.getInstance().track("extension_install",{version:chrome.runtime.getManifest().version}),chrome.tabs.create({url:chrome.runtime.getURL("options.html")+"?welcome=true"})):"update"===e.reason&&(await async function(e){try{n.info("Handling extension update",{previousVersion:e}),await async function(e){try{const t=chrome.runtime.getManifest().version;e<"1.0.0"&&n.info("Migrating settings from previous version",{previousVersion:e,currentVersion:t})}catch(e){n.error("Failed to migrate settings",{error:e})}}(e),await c(),n.info("Extension update completed")}catch(e){n.error("Failed to handle extension update",{error:e})}}(e.previousVersion||"unknown"),t.getInstance().track("extension_update",{from_version:e.previousVersion||"unknown",to_version:chrome.runtime.getManifest().version}))}),chrome.runtime.onStartup.addListener(async()=>{n.info("SmartShield extension startup"),t.getInstance().track("extension_startup")}),chrome.tabs.onUpdated.addListener(async(e,t,a)=>{if("complete"===t.status&&a.url){if(n.debug("Tab updated",{tabId:e,url:a.url}),a.url.startsWith("chrome://")||a.url.startsWith("chrome-extension://"))return;await r(e,a)}}),chrome.tabs.onActivated.addListener(async e=>{n.debug("Tab activated",{tabId:e.tabId}),await s(e.tabId)}),chrome.runtime.onMessage.addListener((r,c,l)=>(async function(r,c,l){try{switch(n.debug("Message received",{message:r,sender:c}),r.type){case"ANALYSIS_RESULT":await async function(r,o){try{if(!o?.id)return;const{score:i,label:c,reasons:l,snapshotHash:d}=r;await e.set(`tab_${o.id}_status`,{score:i,label:c,reasons:l,snapshotHash:d,timestamp:Date.now(),url:o.url}),await s(o.id),t.getInstance().track("scan",{score:i,label:c,url:o.url,domain:o.url?new URL(o.url).hostname:"unknown",reasons_count:l.length}),i>=.8&&await async function(e){try{if(!a.getInstance().getConfig().notifications)return;const t={type:"basic",iconUrl:chrome.runtime.getURL("images/icon-48.png"),title:"SmartShield Warning",message:`Potential phishing detected on ${e.url?new URL(e.url).hostname:"unknown site"}`,buttons:[{title:"View Details"},{title:"Dismiss"}],requireInteraction:!0};chrome.notifications.create(`warning_${e.id}`,t,t=>{t&&n.info("Warning notification created",{notificationId:t,tabId:e.id})})}catch(e){n.error("Failed to show warning notification",{error:e})}}(o),n.info("Analysis result processed",{tabId:o.id,score:i,label:c})}catch(e){n.error("Failed to handle analysis result",{error:e})}}(r.payload,c.tab),l({success:!0});break;case"SHOW_WARNING":await o(r.payload,c.tab),l({success:!0});break;case"GET_TAB_STATUS":l({status:await i(c.tab?.id)});break;case"GET_CONFIG":l({config:a.getInstance().getConfig()});break;case"UPDATE_CONFIG":const d=a.getInstance();await d.saveConfig(r.payload),l({success:!0});break;case"ANALYTICS_EVENT":t.getInstance().track(r.payload.event,r.payload.data),l({success:!0});break;case"OPEN_CHATBOT":await async function(e,a){try{if(!a?.id)return;const{snapshotHash:n,score:r,reasons:s}=e,o=chrome.runtime.getURL(`chatbot.html?tabId=${a.id}&hash=${n}&score=${r}`);await chrome.windows.create({url:o,type:"popup",width:350,height:600,focused:!0}),t.getInstance().track("chatbot_opened",{score:r,url:a.url,snapshot_hash:n})}catch(e){n.error("Failed to open chatbot",{error:e})}}(r.payload,c.tab),l({success:!0});break;case"GET_STATS":l({stats:await async function(){try{const t=a.getInstance().getConfig(),n=await e.getAll(),r=Object.keys(n).filter(e=>e.startsWith("tab_")&&e.endsWith("_status")),s={enabled:t.enabled,totalScans:r.length,highRiskScans:0,mediumRiskScans:0,cleanScans:0,version:chrome.runtime.getManifest().version};for(const e of r){const t=n[e];t.score>=.8?s.highRiskScans++:t.score>=.5?s.mediumRiskScans++:s.cleanScans++}return s}catch(e){return n.error("Failed to get extension stats",{error:e}),null}}()});break;default:n.warn("Unknown message type",{type:r.type}),l({success:!1,error:"Unknown message type"})}}catch(e){n.error("Failed to handle message",{error:e}),l({success:!1,error:e instanceof Error?e.message:"Unknown error"})}}(r,c,l),!0)),chrome.storage.onChanged.addListener((e,t)=>{n.debug("Storage changed",{namespace:t,changes:e}),function(e,t){"sync"!==t&&"local"!==t||e.config&&n.info("Configuration updated",{config:e.config.newValue})}(e,t)}),chrome.alarms.onAlarm.addListener(async t=>{switch(n.debug("Alarm triggered",{alarm:t}),t.name){case"analytics_sync":break;case"cleanup_old_data":await async function(){try{const t=a.getInstance().getConfig().dataRetentionDays||30,r=Date.now()-24*t*60*60*1e3,s=await e.getAll();for(const[t,a]of Object.entries(s))if(t.startsWith("tab_")&&t.endsWith("_status")){const n=a;n.timestamp&&n.timestamp<r&&await e.remove(t)}n.info("Old data cleanup completed")}catch(e){n.error("Failed to cleanup old data",{error:e})}}();break;case"update_phishing_rules":await c()}}),chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"smartshield_scan",title:"Scan with SmartShield",contexts:["page","selection"]}),chrome.contextMenus.create({id:"smartshield_report",title:"Report as phishing",contexts:["page"]}),chrome.contextMenus.onClicked.addListener(async(e,a)=>{if(a)switch(e.menuItemId){case"smartshield_scan":a.id&&await r(a.id,a);break;case"smartshield_report":await async function(e){try{if(!e.id||!e.url)return;t.getInstance().track("user_report",{url:e.url,domain:e.url?new URL(e.url).hostname:"unknown",user_action:"manual_report"}),chrome.notifications.create({type:"basic",iconUrl:chrome.runtime.getURL("images/icon-48.png"),title:"SmartShield",message:"Thank you for your report. We will analyze this page."})}catch(e){n.error("Failed to report as phishing",{error:e})}}(a)}})}),chrome.notifications.onClicked.addListener(async e=>{try{if(e.startsWith("warning_")){const t=parseInt(e.replace("warning_","")),a=await i(t);if(a){const e=await chrome.tabs.get(t);await o(a,e)}}}catch(e){n.error("Failed to handle notification click",{error:e})}}),chrome.notifications.onButtonClicked.addListener(async(e,t)=>{try{if(e.startsWith("warning_")){const a=parseInt(e.replace("warning_",""));if(0===t){const e=await i(a);if(e){const t=await chrome.tabs.get(a);await o(e,t)}}chrome.notifications.clear(e)}}catch(e){n.error("Failed to handle notification button click",{error:e})}}),n.info("SmartShield background service worker started")})();